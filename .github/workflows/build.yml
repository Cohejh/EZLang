name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10.6
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.6'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Extract version
      id: get_version
      run: |
        VERSION=$(jq -r '.version' build-config.json)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build executable
      run: |
        if [ $RUNNER_OS == 'Windows' ]; then
          pyinstaller --onefile --name OpenEZ.exe ./OpenEZ/OpenEZ.py
          mkdir -p dist/windows
          mv dist/OpenEZ.exe dist/windows/OpenEZ.exe
        elif [ $RUNNER_OS == 'macOS' ]; then
          pyinstaller --onefile ./OpenEZ/OpenEZ.py
          mkdir -p dist/macos
          mv dist/OpenEZ dist/macos/OpenEZ
        elif [ $RUNNER_OS == 'Linux' ]; then
          pyinstaller --onefile ./OpenEZ/OpenEZ.py
          mkdir -p dist/linux
          mv dist/OpenEZ dist/linux/OpenEZ
        fi

    - name: Archive binaries
      run: |
        if [ $RUNNER_OS == 'Windows' ]; then
          zip -r dist/OpenEZ-Windows.zip dist/windows
        elif [ $RUNNER_OS == 'macOS' ]; then
          zip -r dist/OpenEZ-MacOS.zip dist/macos
        elif [ $RUNNER_OS == 'Linux' ]; then
          tar -czvf dist/OpenEZ-Linux.tar.gz -C dist/linux OpenEZ
        fi

    - name: Create Release
      id: release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"
        name: "Release v${{ env.VERSION }}"
        files: |
          dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Verify Release Creation
      run: |
        gh release view "v${{ env.VERSION }}" || exit 1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts to release
      if: success() && github.event_name == 'push'
      run: |
        for file in dist/*; do
          echo "Uploading $file"
          gh release upload "v${{ env.VERSION }}" $file
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
